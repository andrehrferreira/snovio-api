{"version":3,"sources":["../src/index.js"],"names":["SnovIO","apiUserID","apiSecret","accessToken","formdata","numericPrefix","argSeparator","encType","encodeFunc","require","str","encodeURIComponent","replace","value","key","tmp","_httpBuildQueryHelper","val","k","push","join","Error","isNaN","String","query","Promise","resolve","reject","request","post","url","json","grant_type","client_id","client_secret","err","res","body","access_token","domain","getAccessToken","token","statusCode","result","params","emails","buildQuery","firstName","lastName","email"],"mappings":"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","file":"index.js","sourcesContent":["import request from \"request\";\r\n\r\nclass SnovIO{\r\n    constructor(apiUserID, apiSecret){\r\n        this.apiUserID = apiUserID;\r\n        this.apiSecret = apiSecret;\r\n        this.accessToken = \"\";\r\n    }\r\n\r\n     /**\r\n     * hp's http_build_query() in javascript\r\n     *\r\n     * @see https://locutus.io/php/url/http_build_query/\r\n     * @param string domain \r\n     */\r\n    buildQuery(formdata, numericPrefix, argSeparator, encType){\r\n        var encodeFunc\r\n\r\n        switch (encType) {\r\n            case 'PHP_QUERY_RFC3986':\r\n            encodeFunc = require('../url/rawurlencode')\r\n            break\r\n\r\n            case 'PHP_QUERY_RFC1738':\r\n            default:\r\n            encodeFunc = function(str){\r\n                str = (str + '')\r\n\r\n                return encodeURIComponent(str)\r\n                    .replace(/!/g, '%21')\r\n                    .replace(/'/g, '%27')\r\n                    .replace(/\\(/g, '%28')\r\n                    .replace(/\\)/g, '%29')\r\n                    .replace(/\\*/g, '%2A')\r\n                    .replace(/~/g, '%7E')\r\n                    .replace(/%20/g, '+')\r\n            }\r\n            break\r\n        }\r\n\r\n        var value\r\n        var key\r\n        var tmp = []\r\n\r\n        var _httpBuildQueryHelper = function (key, val, argSeparator) {\r\n            var k\r\n            var tmp = []\r\n            if (val === true) {\r\n            val = '1'\r\n            } else if (val === false) {\r\n            val = '0'\r\n            }\r\n            if (val !== null) {\r\n            if (typeof val === 'object') {\r\n                for (k in val) {\r\n                if (val[k] !== null) {\r\n                    tmp.push(_httpBuildQueryHelper(key + '[' + k + ']', val[k], argSeparator))\r\n                }\r\n                }\r\n                return tmp.join(argSeparator)\r\n            } else if (typeof val !== 'function') {\r\n                return encodeFunc(key) + '=' + encodeFunc(val)\r\n            } else {\r\n                throw new Error('There was an error processing for http_build_query().')\r\n            }\r\n            } else {\r\n            return ''\r\n            }\r\n        }\r\n\r\n        if (!argSeparator) {\r\n            argSeparator = '&'\r\n        }\r\n        for (key in formdata) {\r\n            value = formdata[key]\r\n            if (numericPrefix && !isNaN(key)) {\r\n            key = String(numericPrefix) + key\r\n            }\r\n            var query = _httpBuildQueryHelper(key, value, argSeparator)\r\n            if (query !== '') {\r\n            tmp.push(query)\r\n            }\r\n        }\r\n\r\n        return tmp.join(argSeparator)\r\n    }\r\n\r\n    /**\r\n     * You need to generate an access token to authenticate future requests. \r\n     * When making a request, please specify this access token in the Authorization field.\r\n     *\r\n     * @see https://snov.io/api#Authentification\r\n     */\r\n    getAccessToken(){\r\n        return new Promise((resolve, reject) => {\r\n            if(this.accessToken) resolve(this.accessToken)\r\n            else{\r\n                request.post({\r\n                    url: 'https://app.snov.io/oauth/access_token',\r\n                    json: {\r\n                        grant_type: 'client_credentials',\r\n                        client_id: this.apiUserID,\r\n                        client_secret: this.apiSecret,\r\n                    }\r\n                }, (err, res, body) => {\r\n                    if(err) reject(err);\r\n                    else if(body.access_token){\r\n                        this.accessToken = body.access_token;\r\n                        resolve(body.access_token);\r\n                    } \r\n                    else reject(\"Couln't validate the API User ID and/or API Secret.\");\r\n                });\r\n            }            \r\n        });\r\n    }\r\n\r\n    /**\r\n     * With this API method, you can find out the number of email addresses from a certain domain in our database. \r\n     * It`s completely free, so you don`t need credits to use it!\r\n     *\r\n     * @see https://snov.io/api#EmailCount\r\n     * @param string domain \r\n     */\r\n    getEmailCount(domain){\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const token = await this.getAccessToken();\r\n\r\n                request.post({\r\n                    url: 'https://app.snov.io/restapi/get-domain-emails-count',\r\n                    json: {\r\n                        access_token: token,\r\n                        domain: domain\r\n                    }\r\n                }, (err, res, body) => {\r\n                    if(err) reject(err);\r\n                    else if (res && res.statusCode === 200) resolve(body.result);\r\n                    else reject(\"Error to call getEmailCount\");\r\n                });\r\n            }\r\n            catch(err){\r\n                reject(err);\r\n            }\r\n        });             \r\n    }\r\n\r\n    /**\r\n     * Enter a domain name and Snov.io will return all the email addresses on the domain. If there is any \r\n     * additional information about the email owner available in the database, we will add it as well. Each \r\n     * response returns up to 100 emails. If it does not return at least one email, you will not be charged \r\n     * for the request.\r\n     *\r\n     * @see https://snov.io/api#DomainSearch\r\n     * @param array emails \r\n     */\r\n    getDomainSearch(params){\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const token = await this.getAccessToken();\r\n                params[\"access_token\"] = token;\r\n\r\n                request.post({\r\n                    url: 'https://app.snov.io/restapi/get-domain-emails-with-info',\r\n                    json: params\r\n                }, (err, res, body) => {\r\n                    if(err) reject(err);\r\n                    else if (res && res.statusCode === 200) resolve(body.emails);\r\n                    else reject(\"Error to call getDomainSearch\");\r\n                });\r\n            }\r\n            catch(err){\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the provided email addresses are valid and deliverable. API endpoint will return the email verification results. \r\n     * If we haven’t verified a certain email address before, the results will not be returned to you. In this case, \r\n     * the API will return a “not_verified” identifier and you will not be charged credits for this email. You should use \r\n     * the Add Emails for Verification method to push this email address for verification, after which you will be \r\n     * able to get the email verification results using this endpoint.\r\n     *\r\n     * @see https://snov.io/api#EmailVerifier\r\n     * @param array emails \r\n     */\r\n    getEmailVerifier(emails){\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const token = await this.getAccessToken();\r\n                let query = { \"emails\": emails };\r\n\r\n                request.post({\r\n                    url: `https://app.snov.io/restapi/get-emails-verification-status?${this.buildQuery(query)}`,\r\n                    json: { access_token: token }\r\n                }, (err, res, body) => {\r\n                    if(err) reject(err);\r\n                    else if (res && res.statusCode === 200) resolve(body);\r\n                    else reject(\"Error to call getEmailVerifier\");\r\n                });\r\n            }\r\n            catch(err){\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * If you've never verified a certain email address before, you should push it for verification using \r\n     * this API method. After performing this action, you can receive the verification results using the \r\n     * Email Verifier.\r\n     *\r\n     * @see https://snov.io/api#AddEmailsforVerification\r\n     * @param array emails \r\n     */\r\n    addEmailsForVerification(emails){\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const token = await this.getAccessToken();\r\n                let query = { \"emails\": emails };\r\n\r\n                request.post({\r\n                    url: `https://app.snov.io/restapi/add-emails-to-verification?${this.buildQuery(query)}`,\r\n                    json: { access_token: token }\r\n                }, (err, res, body) => {\r\n                    if(err) reject(err);\r\n                    else if (res && res.statusCode === 200) resolve(body);\r\n                    else reject(\"Error to call addEmailsForVerification\");\r\n                });\r\n            }\r\n            catch(err){\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This API method finds email addresses using the person`s first and last name, and a domain name. \r\n     * If we don`t have this email address in our database, we won`t be able to provide the results to \r\n     * you right away. To speed up the process, you can use the Add Names To Find Emails method to push \r\n     * this email address for search. After that, try the Email Finder method again.\r\n     *\r\n     * @see https://snov.io/api#EmailFinder\r\n     * @param string domain \r\n     */\r\n    getEmailFinder(firstName, lastName, domain){\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const token = await this.getAccessToken();\r\n\r\n                request.post({\r\n                    url: 'https://app.snov.io/restapi/get-emails-from-names',\r\n                    json: {\r\n                        access_token: token,\r\n                        domain: domain,\r\n                        firstName: firstName,\r\n                        lastName: lastName\r\n                    }\r\n                }, (err, res, body) => {\r\n                    if(err) reject(err);\r\n                    else if (res && res.statusCode === 200) resolve(body);\r\n                    else reject(\"Error to call getEmailFinder\");\r\n                });\r\n            }\r\n            catch(err){\r\n                reject(err);\r\n            }\r\n        });             \r\n    }\r\n\r\n    /**\r\n     * If Snov.io does not have the emails you are looking for in its database and can't provide these email \r\n     * addresses via the Email Finder, you can try to push the request for email search using this method. \r\n     * If an email is found, you can collect it by using the free Email Finder request again.\r\n     *\r\n     * @see https://snov.io/api#AddNamestoFindEmails\r\n     * @param string domain \r\n     */\r\n    getAddNamesToFindEmails(firstName, lastName, domain){\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const token = await this.getAccessToken();\r\n\r\n                request.post({\r\n                    url: 'https://app.snov.io/restapi/add-names-to-find-emails',\r\n                    json: {\r\n                        access_token: token,\r\n                        domain: domain,\r\n                        firstName: firstName,\r\n                        lastName: lastName\r\n                    }\r\n                }, (err, res, body) => {\r\n                    if(err) reject(err);\r\n                    else if (res && res.statusCode === 200) resolve(body);\r\n                    else reject(\"Error to call getAddNamesToFindEmails\");\r\n                });\r\n            }\r\n            catch(err){\r\n                reject(err);\r\n            }\r\n        });             \r\n    }\r\n\r\n    /**\r\n     * Provide an email address and Snov.io will return all the profile information connected to the provided \r\n     * email address owner from the database. If we find no information about the email owner in our database, \r\n     * you will not be charged for the request.\r\n     *\r\n     * @see https://snov.io/api#GetProfileByEmail\r\n     * @param string email \r\n     */\r\n    getProfileByEmail(email){\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const token = await this.getAccessToken();\r\n\r\n                request.post({\r\n                    url: 'https://app.snov.io/restapi/get-profile-by-email',\r\n                    json: {\r\n                        access_token: token,\r\n                        email: email\r\n                    }\r\n                }, (err, res, body) => {\r\n                    if(err) reject(err);\r\n                    else if (res && res.statusCode === 200) resolve(body);\r\n                    else reject(\"Error to call getProfileByEmail\");\r\n                });\r\n            }\r\n            catch(err){\r\n                reject(err);\r\n            }\r\n        });             \r\n    }\r\n}\r\n\r\nexport default SnovIO;"]}