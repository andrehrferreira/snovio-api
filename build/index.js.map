{"version":3,"sources":["../src/index.js"],"names":["SnovIO","apiUserID","apiSecret","accessToken","formdata","numericPrefix","argSeparator","encType","encodeFunc","require","str","encodeURIComponent","replace","value","key","tmp","_httpBuildQueryHelper","val","k","push","join","Error","isNaN","String","query","Promise","resolve","reject","request","post","url","json","grant_type","client_id","client_secret","err","res","body","access_token","domain","getAccessToken","token","statusCode","result","params","get","emails","buildQuery","firstName","lastName","email"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;IAEMA,M;AACF,oBAAYC,SAAZ,EAAuBC,SAAvB,EAAiC;AAAA;;AAC7B,aAAKD,SAAL,GAAiBA,SAAjB;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,WAAL,GAAmB,EAAnB;AACH;;AAEA;;;;;;;;;;mCAMUC,Q,EAAUC,a,EAAeC,Y,EAAcC,O,EAAQ;AACtD,gBAAIC,UAAJ;;AAEA,oBAAQD,OAAR;AACI,qBAAK,mBAAL;AACAC,iCAAaC,QAAQ,qBAAR,CAAb;AACA;;AAEA,qBAAK,mBAAL;AACA;AACAD,iCAAa,oBAASE,GAAT,EAAa;AACtBA,8BAAOA,MAAM,EAAb;;AAEA,+BAAOC,mBAAmBD,GAAnB,EACFE,OADE,CACM,IADN,EACY,KADZ,EAEFA,OAFE,CAEM,IAFN,EAEY,KAFZ,EAGFA,OAHE,CAGM,KAHN,EAGa,KAHb,EAIFA,OAJE,CAIM,KAJN,EAIa,KAJb,EAKFA,OALE,CAKM,KALN,EAKa,KALb,EAMFA,OANE,CAMM,IANN,EAMY,KANZ,EAOFA,OAPE,CAOM,MAPN,EAOc,GAPd,CAAP;AAQH,qBAXD;AAYA;AAnBJ;;AAsBA,gBAAIC,KAAJ;AACA,gBAAIC,GAAJ;AACA,gBAAIC,MAAM,EAAV;;AAEA,gBAAIC,wBAAwB,SAAxBA,qBAAwB,CAAUF,GAAV,EAAeG,GAAf,EAAoBX,YAApB,EAAkC;AAC1D,oBAAIY,CAAJ;AACA,oBAAIH,MAAM,EAAV;AACA,oBAAIE,QAAQ,IAAZ,EAAkB;AAClBA,0BAAM,GAAN;AACC,iBAFD,MAEO,IAAIA,QAAQ,KAAZ,EAAmB;AAC1BA,0BAAM,GAAN;AACC;AACD,oBAAIA,QAAQ,IAAZ,EAAkB;AAClB,wBAAI,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAnB,EAA6B;AACzB,6BAAKC,CAAL,IAAUD,GAAV,EAAe;AACf,gCAAIA,IAAIC,CAAJ,MAAW,IAAf,EAAqB;AACjBH,oCAAII,IAAJ,CAASH,sBAAsBF,MAAM,GAAN,GAAYI,CAAZ,GAAgB,GAAtC,EAA2CD,IAAIC,CAAJ,CAA3C,EAAmDZ,YAAnD,CAAT;AACH;AACA;AACD,+BAAOS,IAAIK,IAAJ,CAASd,YAAT,CAAP;AACH,qBAPD,MAOO,IAAI,OAAOW,GAAP,KAAe,UAAnB,EAA+B;AAClC,+BAAOT,WAAWM,GAAX,IAAkB,GAAlB,GAAwBN,WAAWS,GAAX,CAA/B;AACH,qBAFM,MAEA;AACH,8BAAM,IAAII,KAAJ,CAAU,uDAAV,CAAN;AACH;AACA,iBAbD,MAaO;AACP,2BAAO,EAAP;AACC;AACJ,aAxBD;;AA0BA,gBAAI,CAACf,YAAL,EAAmB;AACfA,+BAAe,GAAf;AACH;AACD,iBAAKQ,GAAL,IAAYV,QAAZ,EAAsB;AAClBS,wBAAQT,SAASU,GAAT,CAAR;AACA,oBAAIT,iBAAiB,CAACiB,MAAMR,GAAN,CAAtB,EAAkC;AAClCA,0BAAMS,OAAOlB,aAAP,IAAwBS,GAA9B;AACC;AACD,oBAAIU,QAAQR,sBAAsBF,GAAtB,EAA2BD,KAA3B,EAAkCP,YAAlC,CAAZ;AACA,oBAAIkB,UAAU,EAAd,EAAkB;AAClBT,wBAAII,IAAJ,CAASK,KAAT;AACC;AACJ;;AAED,mBAAOT,IAAIK,IAAJ,CAASd,YAAT,CAAP;AACH;;AAED;;;;;;;;;yCAMgB;AAAA;;AACZ,mBAAO,IAAImB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAG,MAAKxB,WAAR,EAAqBuB,QAAQ,MAAKvB,WAAb,EAArB,KACI;AACAyB,sCAAQC,IAAR,CAAa;AACTC,6BAAK,2CADI;AAETC,8BAAM;AACFC,wCAAY,oBADV;AAEFC,uCAAW,MAAKhC,SAFd;AAGFiC,2CAAe,MAAKhC;AAHlB;AAFG,qBAAb,EAOG,UAACiC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnB,4BAAGF,GAAH,EAAQR,OAAOQ,GAAP,EAAR,KACK,IAAGE,KAAKC,YAAR,EAAqB;AACtB,kCAAKnC,WAAL,GAAmBkC,KAAKC,YAAxB;AACAZ,oCAAQW,KAAKC,YAAb;AACH,yBAHI,MAIAX,OAAO,qDAAP;AACR,qBAdD;AAeH;AACJ,aAnBM,CAAP;AAoBH;;AAED;;;;;;;;;;sCAOcY,M,EAAO;AAAA;;AACjB,mBAAO,IAAId,OAAJ;AAAA,mFAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAES,OAAKa,cAAL,EAFT;;AAAA;AAELC,yCAFK;;;AAIXb,sDAAQC,IAAR,CAAa;AACTC,6CAAK,gDADI;AAETC,8CAAM;AACFO,0DAAcG,KADZ;AAEFF,oDAAQA;AAFN;AAFG,qCAAb,EAMG,UAACJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnB,4CAAGF,GAAH,EAAQR,OAAOQ,GAAP,EAAR,KACK,IAAIC,OAAOA,IAAIM,UAAJ,KAAmB,GAA9B,EAAmChB,QAAQW,KAAKM,MAAb,EAAnC,KACAhB,OAAO,6BAAP;AACR,qCAVD;AAJW;AAAA;;AAAA;AAAA;AAAA;;AAiBXA;;AAjBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,gBAAP;AAoBH;;AAED;;;;;;;;;;;;wCASgBiB,M,EAAO;AAAA;;AACnB,mBAAO,IAAInB,OAAJ;AAAA,oFAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAES,OAAKa,cAAL,EAFT;;AAAA;AAELC,yCAFK;;AAGXG,2CAAO,cAAP,IAAyBH,KAAzB;;AAEAb,sDAAQiB,GAAR,CAAY;AACRf,6CAAK,gDADG;AAERC,8CAAMa;AAFE,qCAAZ,EAGG,UAACT,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnB,4CAAGF,GAAH,EAAQR,OAAOQ,GAAP,EAAR,KACK,IAAIC,OAAOA,IAAIM,UAAJ,KAAmB,GAA9B,EAAmChB,QAAQW,KAAKS,MAAb,EAAnC,KACAnB,OAAO,+BAAP;AACR,qCAPD;AALW;AAAA;;AAAA;AAAA;AAAA;;AAeXA;;AAfW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,gBAAP;AAkBH;;AAED;;;;;;;;;;;;;yCAUiBmB,M,EAAO;AAAA;;AACpB,mBAAO,IAAIrB,OAAJ;AAAA,oFAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAES,OAAKa,cAAL,EAFT;;AAAA;AAELC,yCAFK;AAGPjB,yCAHO,GAGC,EAAE,UAAUsB,MAAZ,EAHD;;;AAKXlB,sDAAQC,IAAR,CAAa;AACTC,wGAA8D,OAAKiB,UAAL,CAAgBvB,KAAhB,CADrD;AAETO,8CAAM,EAAEO,cAAcG,KAAhB;AAFG,qCAAb,EAGG,UAACN,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnB,4CAAGF,GAAH,EAAQR,OAAOQ,GAAP,EAAR,KACK,IAAIC,OAAOA,IAAIM,UAAJ,KAAmB,GAA9B,EAAmChB,QAAQW,IAAR,EAAnC,KACAV,OAAO,gCAAP;AACR,qCAPD;AALW;AAAA;;AAAA;AAAA;AAAA;;AAeXA;;AAfW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,gBAAP;AAkBH;;AAED;;;;;;;;;;;iDAQyBmB,M,EAAO;AAAA;;AAC5B,mBAAO,IAAIrB,OAAJ;AAAA,oFAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAES,OAAKa,cAAL,EAFT;;AAAA;AAELC,yCAFK;AAGPjB,yCAHO,GAGC,EAAE,UAAUsB,MAAZ,EAHD;;;AAKXlB,sDAAQC,IAAR,CAAa;AACTC,oGAA0D,OAAKiB,UAAL,CAAgBvB,KAAhB,CADjD;AAETO,8CAAM,EAAEO,cAAcG,KAAhB;AAFG,qCAAb,EAGG,UAACN,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnB,4CAAGF,GAAH,EAAQR,OAAOQ,GAAP,EAAR,KACK,IAAIC,OAAOA,IAAIM,UAAJ,KAAmB,GAA9B,EAAmChB,QAAQW,IAAR,EAAnC,KACAV,OAAO,wCAAP;AACR,qCAPD;AALW;AAAA;;AAAA;AAAA;AAAA;;AAeXA;;AAfW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,gBAAP;AAkBH;;AAED;;;;;;;;;;;;uCASeqB,S,EAAWC,Q,EAAUV,M,EAAO;AAAA;;AACvC,mBAAO,IAAId,OAAJ;AAAA,oFAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAES,OAAKa,cAAL,EAFT;;AAAA;AAELC,yCAFK;;;AAIXb,sDAAQC,IAAR,CAAa;AACTC,6CAAK,8CADI;AAETC,8CAAM;AACFO,0DAAcG,KADZ;AAEFF,oDAAQA,MAFN;AAGFS,uDAAWA,SAHT;AAIFC,sDAAUA;AAJR;AAFG,qCAAb,EAQG,UAACd,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnB,4CAAGF,GAAH,EAAQR,OAAOQ,GAAP,EAAR,KACK,IAAIC,OAAOA,IAAIM,UAAJ,KAAmB,GAA9B,EAAmChB,QAAQW,IAAR,EAAnC,KACAV,OAAO,8BAAP;AACR,qCAZD;AAJW;AAAA;;AAAA;AAAA;AAAA;;AAmBXA;;AAnBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,gBAAP;AAsBH;;AAED;;;;;;;;;;;gDAQwBqB,S,EAAWC,Q,EAAUV,M,EAAO;AAAA;;AAChD,mBAAO,IAAId,OAAJ;AAAA,oFAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAES,OAAKa,cAAL,EAFT;;AAAA;AAELC,yCAFK;;;AAIXb,sDAAQC,IAAR,CAAa;AACTC,6CAAK,iDADI;AAETC,8CAAM;AACFO,0DAAcG,KADZ;AAEFF,oDAAQA,MAFN;AAGFS,uDAAWA,SAHT;AAIFC,sDAAUA;AAJR;AAFG,qCAAb,EAQG,UAACd,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnB,4CAAGF,GAAH,EAAQR,OAAOQ,GAAP,EAAR,KACK,IAAIC,OAAOA,IAAIM,UAAJ,KAAmB,GAA9B,EAAmChB,QAAQW,IAAR,EAAnC,KACAV,OAAO,uCAAP;AACR,qCAZD;AAJW;AAAA;;AAAA;AAAA;AAAA;;AAmBXA;;AAnBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,gBAAP;AAsBH;;AAED;;;;;;;;;;;0CAQkBuB,K,EAAM;AAAA;;AACpB,mBAAO,IAAIzB,OAAJ;AAAA,oFAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAES,OAAKa,cAAL,EAFT;;AAAA;AAELC,yCAFK;;;AAIXb,sDAAQC,IAAR,CAAa;AACTC,6CAAK,6CADI;AAETC,8CAAM;AACFO,0DAAcG,KADZ;AAEFS,mDAAOA;AAFL;AAFG,qCAAb,EAMG,UAACf,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnB,4CAAGF,GAAH,EAAQR,OAAOQ,GAAP,EAAR,KACK,IAAIC,OAAOA,IAAIM,UAAJ,KAAmB,GAA9B,EAAmChB,QAAQW,IAAR,EAAnC,KACAV,OAAO,iCAAP;AACR,qCAVD;AAJW;AAAA;;AAAA;AAAA;AAAA;;AAiBXA;;AAjBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,gBAAP;AAoBH;;;;;;kBAGU3B,M","file":"index.js","sourcesContent":["import request from \"request\";\n\nclass SnovIO{\n    constructor(apiUserID, apiSecret){\n        this.apiUserID = apiUserID;\n        this.apiSecret = apiSecret;\n        this.accessToken = \"\";\n    }\n\n     /**\n     * hp's http_build_query() in javascript\n     *\n     * @see https://locutus.io/php/url/http_build_query/\n     * @param string domain \n     */\n    buildQuery(formdata, numericPrefix, argSeparator, encType){\n        var encodeFunc\n\n        switch (encType) {\n            case 'PHP_QUERY_RFC3986':\n            encodeFunc = require('../url/rawurlencode')\n            break\n\n            case 'PHP_QUERY_RFC1738':\n            default:\n            encodeFunc = function(str){\n                str = (str + '')\n\n                return encodeURIComponent(str)\n                    .replace(/!/g, '%21')\n                    .replace(/'/g, '%27')\n                    .replace(/\\(/g, '%28')\n                    .replace(/\\)/g, '%29')\n                    .replace(/\\*/g, '%2A')\n                    .replace(/~/g, '%7E')\n                    .replace(/%20/g, '+')\n            }\n            break\n        }\n\n        var value\n        var key\n        var tmp = []\n\n        var _httpBuildQueryHelper = function (key, val, argSeparator) {\n            var k\n            var tmp = []\n            if (val === true) {\n            val = '1'\n            } else if (val === false) {\n            val = '0'\n            }\n            if (val !== null) {\n            if (typeof val === 'object') {\n                for (k in val) {\n                if (val[k] !== null) {\n                    tmp.push(_httpBuildQueryHelper(key + '[' + k + ']', val[k], argSeparator))\n                }\n                }\n                return tmp.join(argSeparator)\n            } else if (typeof val !== 'function') {\n                return encodeFunc(key) + '=' + encodeFunc(val)\n            } else {\n                throw new Error('There was an error processing for http_build_query().')\n            }\n            } else {\n            return ''\n            }\n        }\n\n        if (!argSeparator) {\n            argSeparator = '&'\n        }\n        for (key in formdata) {\n            value = formdata[key]\n            if (numericPrefix && !isNaN(key)) {\n            key = String(numericPrefix) + key\n            }\n            var query = _httpBuildQueryHelper(key, value, argSeparator)\n            if (query !== '') {\n            tmp.push(query)\n            }\n        }\n\n        return tmp.join(argSeparator)\n    }\n\n    /**\n     * You need to generate an access token to authenticate future requests. \n     * When making a request, please specify this access token in the Authorization field.\n     *\n     * @see https://snov.io/api#Authentification\n     */\n    getAccessToken(){\n        return new Promise((resolve, reject) => {\n            if(this.accessToken) resolve(this.accessToken)\n            else{\n                request.post({\n                    url: 'https://api.snov.io/v1/oauth/access_token',\n                    json: {\n                        grant_type: 'client_credentials',\n                        client_id: this.apiUserID,\n                        client_secret: this.apiSecret,\n                    }\n                }, (err, res, body) => {\n                    if(err) reject(err);\n                    else if(body.access_token){\n                        this.accessToken = body.access_token;\n                        resolve(body.access_token);\n                    } \n                    else reject(\"Couln't validate the API User ID and/or API Secret.\");\n                });\n            }            \n        });\n    }\n\n    /**\n     * With this API method, you can find out the number of email addresses from a certain domain in our database. \n     * It`s completely free, so you don`t need credits to use it!\n     *\n     * @see https://snov.io/api#EmailCount\n     * @param string domain \n     */\n    getEmailCount(domain){\n        return new Promise(async (resolve, reject) => {\n            try{\n                const token = await this.getAccessToken();\n\n                request.post({\n                    url: 'https://api.snov.io/v1/get-domain-emails-count',\n                    json: {\n                        access_token: token,\n                        domain: domain\n                    }\n                }, (err, res, body) => {\n                    if(err) reject(err);\n                    else if (res && res.statusCode === 200) resolve(body.result);\n                    else reject(\"Error to call getEmailCount\");\n                });\n            }\n            catch(err){\n                reject(err);\n            }\n        });             \n    }\n\n    /**\n     * Enter a domain name and Snov.io will return all the email addresses on the domain. If there is any \n     * additional information about the email owner available in the database, we will add it as well. Each \n     * response returns up to 100 emails. If it does not return at least one email, you will not be charged \n     * for the request.\n     *\n     * @see https://snov.io/api#DomainSearch\n     * @param array emails \n     */\n    getDomainSearch(params){\n        return new Promise(async (resolve, reject) => {\n            try{\n                const token = await this.getAccessToken();\n                params[\"access_token\"] = token;\n\n                request.get({\n                    url: 'https://api.snov.io/v2/domain-emails-with-info',\n                    json: params\n                }, (err, res, body) => {\n                    if(err) reject(err);\n                    else if (res && res.statusCode === 200) resolve(body.emails);\n                    else reject(\"Error to call getDomainSearch\");\n                });\n            }\n            catch(err){\n                reject(err);\n            }\n        });\n    }\n\n    /**\n     * Check if the provided email addresses are valid and deliverable. API endpoint will return the email verification results. \n     * If we haven’t verified a certain email address before, the results will not be returned to you. In this case, \n     * the API will return a “not_verified” identifier and you will not be charged credits for this email. You should use \n     * the Add Emails for Verification method to push this email address for verification, after which you will be \n     * able to get the email verification results using this endpoint.\n     *\n     * @see https://snov.io/api#EmailVerifier\n     * @param array emails \n     */\n    getEmailVerifier(emails){\n        return new Promise(async (resolve, reject) => {\n            try{\n                const token = await this.getAccessToken();\n                let query = { \"emails\": emails };\n\n                request.post({\n                    url: `https://api.snov.io/v1/get-emails-verification-status?${this.buildQuery(query)}`,\n                    json: { access_token: token }\n                }, (err, res, body) => {\n                    if(err) reject(err);\n                    else if (res && res.statusCode === 200) resolve(body);\n                    else reject(\"Error to call getEmailVerifier\");\n                });\n            }\n            catch(err){\n                reject(err);\n            }\n        });\n    }\n\n    /**\n     * If you've never verified a certain email address before, you should push it for verification using \n     * this API method. After performing this action, you can receive the verification results using the \n     * Email Verifier.\n     *\n     * @see https://snov.io/api#AddEmailsforVerification\n     * @param array emails \n     */\n    addEmailsForVerification(emails){\n        return new Promise(async (resolve, reject) => {\n            try{\n                const token = await this.getAccessToken();\n                let query = { \"emails\": emails };\n\n                request.post({\n                    url: `https://api.snov.io/v1/add-emails-to-verification?${this.buildQuery(query)}`,\n                    json: { access_token: token }\n                }, (err, res, body) => {\n                    if(err) reject(err);\n                    else if (res && res.statusCode === 200) resolve(body);\n                    else reject(\"Error to call addEmailsForVerification\");\n                });\n            }\n            catch(err){\n                reject(err);\n            }\n        });\n    }\n\n    /**\n     * This API method finds email addresses using the person`s first and last name, and a domain name. \n     * If we don`t have this email address in our database, we won`t be able to provide the results to \n     * you right away. To speed up the process, you can use the Add Names To Find Emails method to push \n     * this email address for search. After that, try the Email Finder method again.\n     *\n     * @see https://snov.io/api#EmailFinder\n     * @param string domain \n     */\n    getEmailFinder(firstName, lastName, domain){\n        return new Promise(async (resolve, reject) => {\n            try{\n                const token = await this.getAccessToken();\n\n                request.post({\n                    url: 'https://api.snov.io/v1/get-emails-from-names',\n                    json: {\n                        access_token: token,\n                        domain: domain,\n                        firstName: firstName,\n                        lastName: lastName\n                    }\n                }, (err, res, body) => {\n                    if(err) reject(err);\n                    else if (res && res.statusCode === 200) resolve(body);\n                    else reject(\"Error to call getEmailFinder\");\n                });\n            }\n            catch(err){\n                reject(err);\n            }\n        });             \n    }\n\n    /**\n     * If Snov.io does not have the emails you are looking for in its database and can't provide these email \n     * addresses via the Email Finder, you can try to push the request for email search using this method. \n     * If an email is found, you can collect it by using the free Email Finder request again.\n     *\n     * @see https://snov.io/api#AddNamestoFindEmails\n     * @param string domain \n     */\n    getAddNamesToFindEmails(firstName, lastName, domain){\n        return new Promise(async (resolve, reject) => {\n            try{\n                const token = await this.getAccessToken();\n\n                request.post({\n                    url: 'https://api.snov.io/v1/add-names-to-find-emails',\n                    json: {\n                        access_token: token,\n                        domain: domain,\n                        firstName: firstName,\n                        lastName: lastName\n                    }\n                }, (err, res, body) => {\n                    if(err) reject(err);\n                    else if (res && res.statusCode === 200) resolve(body);\n                    else reject(\"Error to call getAddNamesToFindEmails\");\n                });\n            }\n            catch(err){\n                reject(err);\n            }\n        });             \n    }\n\n    /**\n     * Provide an email address and Snov.io will return all the profile information connected to the provided \n     * email address owner from the database. If we find no information about the email owner in our database, \n     * you will not be charged for the request.\n     *\n     * @see https://snov.io/api#GetProfileByEmail\n     * @param string email \n     */\n    getProfileByEmail(email){\n        return new Promise(async (resolve, reject) => {\n            try{\n                const token = await this.getAccessToken();\n\n                request.post({\n                    url: 'https://api.snov.io/v1/get-profile-by-email',\n                    json: {\n                        access_token: token,\n                        email: email\n                    }\n                }, (err, res, body) => {\n                    if(err) reject(err);\n                    else if (res && res.statusCode === 200) resolve(body);\n                    else reject(\"Error to call getProfileByEmail\");\n                });\n            }\n            catch(err){\n                reject(err);\n            }\n        });             \n    }\n}\n\nexport default SnovIO;"]}